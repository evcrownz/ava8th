<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pashasha</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: radial-gradient(ellipse at center, #0a0a2e 0%, #000000 100%);
            overflow: hidden;
            font-family: 'Arial', sans-serif;
            cursor: grab;
        }
        
        body.dragging {
            cursor: grabbing;
        }
        
        #container {
            width: 100vw;
            height: 100vh;
            position: relative;
        }
        
        canvas {
            display: block;
        }
        
        .controls {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            padding: 15px;
            border-radius: 10px;
            color: white;
            border: 1px solid rgba(138, 43, 226, 0.3);
            z-index: 100;
        }
        
        .controls button {
            background: rgba(138, 43, 226, 0.8);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            margin: 5px;
            transition: background 0.3s ease;
        }
        
        .controls button:hover {
            background: rgba(138, 43, 226, 1);
        }
    </style>
</head>
<body>
  <div id="container">

        <!-- ðŸŽµ Music autoplay + loop -->
        <audio autoplay loop>
            <source src="AVAPIC/BLUE.mp3" type="audio/mpeg">
        </audio>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        let scene, camera, renderer, galaxySphere, heartSystem, pictureGroup, flowerSystem, mainGroup;
        let mouse = { x: 0, y: 0 };
        let isDragging = false;
        let autoRotate = true;
        let pictureCards = [];
        let hearts = [];
        let floatingTexts = [];
        let flowers = [];

        // Text messages to display
        const messages = ["iloveyouuu", "imissyouuu", "avaaa", "pashasha", "ayana"];

        // Picture data - change these filenames to your actual images
        const pictureData = [
            { src: "AVAPIC/S1.jpg", position: [8, 3, 2] },
            { src: "AVAPIC/S2.jpg", position: [-6, 4, -3] },
            { src: "AVAPIC/S3.jpg", position: [4, -5, 6] },
            { src: "AVAPIC/S4.jpg", position: [-8, -2, 4] },
            { src: "AVAPIC/S5.jpg", position: [6, 6, -5] },
            { src: "AVAPIC/S6.jpg", position: [-4, 5, -7] },
            { src: "AVAPIC/S7.jpg", position: [7, -4, 3] },
            { src: "AVAPIC/S8.jpg", position: [-5, -6, -2] },
            { src: "AVAPIC/S9.jpg", position: [3, 7, 5] },
            { src: "AVAPIC/S10.jpg", position: [-7, 3, -6] }
        ];

        // Initialize Three.js
        function init() {
            // Scene
            scene = new THREE.Scene();
            
            // Camera
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 15;
            
            // Renderer
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 1);
            document.getElementById('container').appendChild(renderer.domElement);
            
            // Create main group that will contain everything that rotates together
            mainGroup = new THREE.Group();
            scene.add(mainGroup);
            
            createGalaxySphere();
            createFloatingPictures();
            createHeartSystem();
            createFlowerSystem();
            
            // Event listeners
            addEventListeners();
            
            // Start animation
            animate();
        }

        function createGalaxySphere() {
            // Create galaxy texture
            const canvas = document.createElement('canvas');
            canvas.width = 512;
            canvas.height = 512;
            const ctx = canvas.getContext('2d');
            
            // Create gradient for galaxy
            const gradient = ctx.createRadialGradient(256, 256, 0, 256, 256, 256);
            gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
            gradient.addColorStop(0.1, 'rgba(255, 215, 0, 0.9)');
            gradient.addColorStop(0.3, 'rgba(138, 43, 226, 0.7)');
            gradient.addColorStop(0.6, 'rgba(75, 0, 130, 0.5)');
            gradient.addColorStop(0.8, 'rgba(25, 25, 112, 0.3)');
            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');
            
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, 512, 512);
            
            // Add some sparkles
            for (let i = 0; i < 300; i++) {
                const x = Math.random() * 512;
                const y = Math.random() * 512;
                const size = Math.random() * 1.5;
                const alpha = Math.random() * 0.8 + 0.2;
                ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;
                ctx.beginPath();
                ctx.arc(x, y, size, 0, Math.PI * 2);
                ctx.fill();
            }
            
            const texture = new THREE.CanvasTexture(canvas);
            
            // Galaxy sphere geometry and material
            const geometry = new THREE.SphereGeometry(4, 64, 64);
            const material = new THREE.MeshBasicMaterial({
                map: texture,
                transparent: false
            });
            
            galaxySphere = new THREE.Mesh(geometry, material);
            mainGroup.add(galaxySphere);
            
            // Add inner glow
            const glowGeometry = new THREE.SphereGeometry(3.8, 32, 32);
            const glowMaterial = new THREE.MeshBasicMaterial({
                color: 0x8a2be2,
                transparent: true,
                opacity: 0.6
            });
            const glowSphere = new THREE.Mesh(glowGeometry, glowMaterial);
            galaxySphere.add(glowSphere);
        }

        function createFloatingPictures() {
            const loader = new THREE.TextureLoader();
            pictureGroup = new THREE.Group();
            
            pictureData.forEach((data, index) => {
                // Create back-to-back picture frames
                const frameGeometry = new THREE.PlaneGeometry(2, 2);
                
                // Load texture
                loader.load(
                    data.src,
                    (texture) => {
                        // Front picture
                        const frontMaterial = new THREE.MeshBasicMaterial({
                            map: texture,
                            transparent: true,
                            opacity: 0.9
                        });
                        
                        const frontPicture = new THREE.Mesh(frameGeometry, frontMaterial);
                        frontPicture.position.set(data.position[0], data.position[1], data.position[2]);
                        
                        // Back picture (same image but flipped)
                        const backMaterial = new THREE.MeshBasicMaterial({
                            map: texture,
                            transparent: true,
                            opacity: 0.9
                        });
                        
                        const backPicture = new THREE.Mesh(frameGeometry, backMaterial);
                        backPicture.position.set(data.position[0], data.position[1], data.position[2]);
                        backPicture.rotation.y = Math.PI; // Flip 180 degrees
                        
                        // Create a group for both sides
                        const pictureCard = new THREE.Group();
                        pictureCard.add(frontPicture);
                        pictureCard.add(backPicture);
                        
                        pictureGroup.add(pictureCard);
                        pictureCards.push(pictureCard);
                    },
                    undefined,
                    (error) => {
                        // If image fails to load, create a placeholder
                        console.log(`Failed to load ${data.src}, creating placeholder`);
                        
                        // Create placeholder texture
                        const canvas = document.createElement('canvas');
                        canvas.width = 256;
                        canvas.height = 256;
                        const ctx = canvas.getContext('2d');
                        ctx.fillStyle = '#444444';
                        ctx.fillRect(0, 0, 256, 256);
                        ctx.fillStyle = 'white';
                        ctx.font = '20px Arial';
                        ctx.textAlign = 'center';
                        ctx.fillText('Image', 128, 120);
                        ctx.fillText('Not Found', 128, 150);
                        
                        const placeholderTexture = new THREE.CanvasTexture(canvas);
                        
                        const placeholderMaterial = new THREE.MeshBasicMaterial({
                            map: placeholderTexture,
                            transparent: true,
                            opacity: 0.6
                        });
                        
                        // Front and back placeholders
                        const frontPicture = new THREE.Mesh(frameGeometry, placeholderMaterial);
                        frontPicture.position.set(data.position[0], data.position[1], data.position[2]);
                        
                        const backPicture = new THREE.Mesh(frameGeometry, placeholderMaterial);
                        backPicture.position.set(data.position[0], data.position[1], data.position[2]);
                        backPicture.rotation.y = Math.PI;
                        
                        const pictureCard = new THREE.Group();
                        pictureCard.add(frontPicture);
                        pictureCard.add(backPicture);
                        
                        pictureGroup.add(pictureCard);
                        pictureCards.push(pictureCard);
                    }
                );
            });
            
            mainGroup.add(pictureGroup);
        }

        function createHeartSystem() {
            const heartCount = 800;
            heartSystem = new THREE.Group();
            
            const heartGeometry = createHeartGeometry();
            
            for (let i = 0; i < heartCount; i++) {
                // Random position around sphere
                const radius = 5 + Math.random() * 8;
                const theta = Math.random() * Math.PI * 2;
                const phi = Math.random() * Math.PI;
                
                const x = radius * Math.sin(phi) * Math.cos(theta);
                const y = radius * Math.sin(phi) * Math.sin(theta);
                const z = radius * Math.cos(phi);
                
                // Pink and purple colors for hearts
                const colorChoice = Math.random();
                let heartColor;
                if (colorChoice < 0.5) {
                    heartColor = new THREE.Color(1, 0.41, 0.71); // Pink
                } else {
                    heartColor = new THREE.Color(0.63, 0.13, 0.94); // Purple
                }
                
                const heartMaterial = new THREE.MeshBasicMaterial({
                    color: heartColor,
                    transparent: true,
                    opacity: 0.7
                });
                
                const heart = new THREE.Mesh(heartGeometry, heartMaterial);
                heart.position.set(x, y, z);
                heart.scale.set(0.3, 0.3, 0.3);
                
                heart.rotation.x = Math.PI;
                heart.rotation.y = Math.random() * Math.PI * 2;
                heart.rotation.z = Math.random() * Math.PI * 0.5;
                
                heartSystem.add(heart);
                hearts.push(heart);
            }
            
            mainGroup.add(heartSystem);
            
            // Start spawning floating texts
            setInterval(spawnFloatingText, 2000);
        }

        function createFlowerGeometry() {
            // Create a flower shape using multiple circles for petals
            const flowerGroup = new THREE.Group();
            
            // Flower center
            const centerGeometry = new THREE.CircleGeometry(0.1, 8);
            const centerMaterial = new THREE.MeshBasicMaterial({
                color: 0xffff00,
                transparent: true,
                opacity: 0.8
            });
            const center = new THREE.Mesh(centerGeometry, centerMaterial);
            flowerGroup.add(center);
            
            // Petals
            const petalGeometry = new THREE.CircleGeometry(0.2, 8);
            const petalColors = [0xff69b4, 0xff1493, 0xffc0cb, 0xdda0dd, 0x9370db];
            
            for (let i = 0; i < 5; i++) {
                const angle = (i / 5) * Math.PI * 2;
                const petalMaterial = new THREE.MeshBasicMaterial({
                    color: petalColors[i % petalColors.length],
                    transparent: true,
                    opacity: 0.7
                });
                
                const petal = new THREE.Mesh(petalGeometry, petalMaterial);
                petal.position.x = Math.cos(angle) * 0.15;
                petal.position.y = Math.sin(angle) * 0.15;
                petal.position.z = 0.01;
                
                flowerGroup.add(petal);
            }
            
            return flowerGroup;
        }

        function createFlowerSystem() {
            flowerSystem = new THREE.Group();
            
            // Create initial flowers
            for (let i = 0; i < 100; i++) {
                createFallingFlower();
            }
            
            mainGroup.add(flowerSystem);
            
            // Continuously spawn new flowers
            setInterval(() => {
                if (flowers.length < 150) {
                    createFallingFlower();
                }
            }, 500);
        }

        function createFallingFlower() {
            const flower = createFlowerGeometry();
            
            // Random starting position above the scene
            const radius = 15 + Math.random() * 10;
            const angle = Math.random() * Math.PI * 2;
            
            flower.position.x = Math.cos(angle) * radius;
            flower.position.y = 20 + Math.random() * 10; // Start high above
            flower.position.z = Math.sin(angle) * radius;
            
            // Random scale
            const scale = 0.5 + Math.random() * 1;
            flower.scale.set(scale, scale, scale);
            
            // Random rotation
            flower.rotation.x = Math.random() * Math.PI * 2;
            flower.rotation.y = Math.random() * Math.PI * 2;
            flower.rotation.z = Math.random() * Math.PI * 2;
            
            // Add animation properties
            flower.userData = {
                fallSpeed: 0.02 + Math.random() * 0.03,
                rotationSpeed: {
                    x: (Math.random() - 0.5) * 0.05,
                    y: (Math.random() - 0.5) * 0.05,
                    z: (Math.random() - 0.5) * 0.05
                },
                sway: {
                    amplitude: 0.5 + Math.random() * 1,
                    frequency: 0.01 + Math.random() * 0.02,
                    offset: Math.random() * Math.PI * 2
                }
            };
            
            flowerSystem.add(flower);
            flowers.push(flower);
        }

        function createHeartGeometry() {
            // Create heart shape - fixed and properly oriented
            const heartShape = new THREE.Shape();
            
            const x = 0, y = 0;
            // Start from the bottom point of the heart
            heartShape.moveTo(x, y - 0.5);
            // Right side of heart
            heartShape.bezierCurveTo(x, y - 0.5, x + 0.5, y - 0.8, x + 0.5, y - 0.2);
            heartShape.bezierCurveTo(x + 0.5, y + 0.1, x + 0.3, y + 0.2, x, y + 0.5);
            // Left side of heart
            heartShape.bezierCurveTo(x - 0.3, y + 0.2, x - 0.5, y + 0.1, x - 0.5, y - 0.2);
            heartShape.bezierCurveTo(x - 0.5, y - 0.8, x, y - 0.5, x, y - 0.5);

            const extrudeSettings = {
                depth: 0.1,
                bevelEnabled: true,
                bevelSegments: 5,
                steps: 2,
                bevelSize: 0.02,
                bevelThickness: 0.02
            };

            return new THREE.ExtrudeGeometry(heartShape, extrudeSettings);
        }

        function create3DText(text) {
            // Create 3D text geometry using TextGeometry
            const textGroup = new THREE.Group();
            
            // Create a box for each character to simulate 3D text
            const chars = text.split('');
            const charWidth = 0.6;
            const totalWidth = chars.length * charWidth;
            
            chars.forEach((char, index) => {
                // Create 3D letter using box geometry
                const letterGeometry = new THREE.BoxGeometry(0.5, 0.8, 0.2);
                
                // Create texture for the character
                const canvas = document.createElement('canvas');
                canvas.width = 64;
                canvas.height = 64;
                const ctx = canvas.getContext('2d');
                
                // Clear background
                ctx.fillStyle = 'rgba(0, 0, 0, 0)';
                ctx.fillRect(0, 0, 64, 64);
                
                // Draw character
                ctx.font = 'bold 48px Arial';
                ctx.fillStyle = '#ff69b4';
                ctx.strokeStyle = '#ffffff';
                ctx.lineWidth = 2;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.strokeText(char, 32, 32);
                ctx.fillText(char, 32, 32);
                
                const charTexture = new THREE.CanvasTexture(canvas);
                
                // Materials for 3D letter
                const frontMaterial = new THREE.MeshBasicMaterial({
                    map: charTexture,
                    transparent: true
                });
                const sideMaterial = new THREE.MeshBasicMaterial({
                    color: 0xff1493,
                    transparent: true,
                    opacity: 0.8
                });
                
                const materials = [
                    sideMaterial, // right
                    sideMaterial, // left
                    sideMaterial, // top
                    sideMaterial, // bottom
                    frontMaterial, // front
                    frontMaterial  // back
                ];
                
                const letterMesh = new THREE.Mesh(letterGeometry, materials);
                letterMesh.position.x = (index - (chars.length - 1) / 2) * charWidth;
                
                textGroup.add(letterMesh);
            });
            
            return textGroup;
        }

        function spawnFloatingText() {
            const message = messages[Math.floor(Math.random() * messages.length)];
            const textMesh = create3DText(message);
            
            // Random position around the scene
            const angle = Math.random() * Math.PI * 2;
            const radius = 12 + Math.random() * 8;
            textMesh.position.x = Math.cos(angle) * radius;
            textMesh.position.y = 8 + Math.random() * 4;
            textMesh.position.z = Math.sin(angle) * radius;
            
            // Random initial rotation
            textMesh.rotation.x = Math.random() * Math.PI * 2;
            textMesh.rotation.y = Math.random() * Math.PI * 2;
            textMesh.rotation.z = Math.random() * Math.PI * 2;
            
            // Add animation properties
            textMesh.userData = {
                startY: textMesh.position.y,
                opacity: 1,
                age: 0,
                rotationSpeed: {
                    x: (Math.random() - 0.5) * 0.1,
                    y: (Math.random() - 0.5) * 0.1,
                    z: (Math.random() - 0.5) * 0.1
                }
            };
            
            scene.add(textMesh); // Text doesn't rotate with main group
            floatingTexts.push(textMesh);
        }

        function addEventListeners() {
            // Mouse events
            document.addEventListener('mousedown', onMouseDown);
            document.addEventListener('mousemove', onMouseMove);
            document.addEventListener('mouseup', onMouseUp);
            document.addEventListener('wheel', onMouseWheel);
            
            // Touch events
            document.addEventListener('touchstart', onTouchStart);
            document.addEventListener('touchmove', onTouchMove);
            document.addEventListener('touchend', onTouchEnd);
            
            // Window resize
            window.addEventListener('resize', onWindowResize);
        }

        function onMouseDown(event) {
            isDragging = true;
            document.body.classList.add('dragging');
            mouse.x = event.clientX;
            mouse.y = event.clientY;
        }

        function onMouseMove(event) {
            if (isDragging) {
                const deltaX = event.clientX - mouse.x;
                const deltaY = event.clientY - mouse.y;
                
                // Rotate the entire main group (galaxy, hearts, pictures, flowers)
                mainGroup.rotation.y += deltaX * 0.01;
                mainGroup.rotation.x += deltaY * 0.01;
                
                mouse.x = event.clientX;
                mouse.y = event.clientY;
            }
        }

        function onMouseUp() {
            isDragging = false;
            document.body.classList.remove('dragging');
        }

        function onMouseWheel(event) {
            camera.position.z += event.deltaY * 0.02;
            camera.position.z = Math.max(8, Math.min(30, camera.position.z));
        }

        // Touch events
        let touchStartX, touchStartY;

        function onTouchStart(event) {
            event.preventDefault();
            isDragging = true;
            touchStartX = event.touches[0].clientX;
            touchStartY = event.touches[0].clientY;
        }

        function onTouchMove(event) {
            if (isDragging) {
                event.preventDefault();
                const deltaX = event.touches[0].clientX - touchStartX;
                const deltaY = event.touches[0].clientY - touchStartY;
                
                // Rotate the entire main group
                mainGroup.rotation.y += deltaX * 0.01;
                mainGroup.rotation.x += deltaY * 0.01;
                
                touchStartX = event.touches[0].clientX;
                touchStartY = event.touches[0].clientY;
            }
        }

        function onTouchEnd() {
            isDragging = false;
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function animate() {
            requestAnimationFrame(animate);
            
            const time = Date.now() * 0.001;
            
            // Auto rotation
            if (autoRotate && !isDragging) {
                mainGroup.rotation.y += 0.002; // Slower unified rotation
                
                // Individual picture card animations
                pictureCards.forEach((pictureCard, index) => {
                    // Keep original positions from pictureData
                    const originalPos = pictureData[index].position;
                    
                    // Add gentle floating motion
                    pictureCard.position.y = originalPos[1] + Math.sin(time * 0.5 + index) * 0.3;
                    
                    // Add gentle rotation around Y-axis so they can show front/back
                    pictureCard.rotation.y += 0.008;
                });
            }
            
            // Animate falling flowers
            flowers.forEach((flower, index) => {
                // Fall down
                flower.position.y -= flower.userData.fallSpeed;
                
                // Swaying motion
                const swayTime = time + flower.userData.sway.offset;
                flower.position.x += Math.sin(swayTime * flower.userData.sway.frequency) * flower.userData.sway.amplitude * 0.01;
                flower.position.z += Math.cos(swayTime * flower.userData.sway.frequency) * flower.userData.sway.amplitude * 0.01;
                
                // Rotation
                flower.rotation.x += flower.userData.rotationSpeed.x;
                flower.rotation.y += flower.userData.rotationSpeed.y;
                flower.rotation.z += flower.userData.rotationSpeed.z;
                
                // Remove flowers that fall too low and create new ones
                if (flower.position.y < -25) {
                    flowerSystem.remove(flower);
                    
                    // Dispose of materials and geometries
                    flower.children.forEach(child => {
                        child.geometry.dispose();
                        child.material.dispose();
                    });
                    
                    flowers.splice(index, 1);
                }
            });
            
            // Animate floating texts (independent of main group rotation)
            floatingTexts.forEach((text, index) => {
                text.userData.age += 0.016;
                
                // Move down slowly
                text.position.y = text.userData.startY - text.userData.age * 1.5;
                
                // 3D rotation animation
                text.rotation.x += text.userData.rotationSpeed.x;
                text.rotation.y += text.userData.rotationSpeed.y;
                text.rotation.z += text.userData.rotationSpeed.z;
                
                // Fade out after 3 seconds
                if (text.userData.age > 3) {
                    text.userData.opacity = Math.max(0, 1 - (text.userData.age - 3));
                    
                    // Update opacity for all child materials (each letter)
                    text.children.forEach(letter => {
                        letter.material.forEach(mat => {
                            mat.opacity = text.userData.opacity;
                        });
                    });
                }
                
                // Remove after 5 seconds
                if (text.userData.age > 5) {
                    scene.remove(text);
                    
                    // Dispose of all geometries and materials
                    text.children.forEach(letter => {
                        letter.geometry.dispose();
                        letter.material.forEach(mat => {
                            if (mat.map) mat.map.dispose();
                            mat.dispose();
                        });
                    });
                    
                    floatingTexts.splice(index, 1);
                }
            });
            
            // Render
            renderer.render(scene, camera);
        }

        // Control functions
        function toggleAutoRotation() {
            autoRotate = !autoRotate;
        }

        function resetView() {
            camera.position.set(0, 0, 15);
            mainGroup.rotation.set(0, 0, 0);
        }

        // Initialize when page loads
        init();
    </script>
</body>
</html>
